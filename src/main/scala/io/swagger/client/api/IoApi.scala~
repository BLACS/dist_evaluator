/**
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.api

import io.swagger.client.model.Dimensions
import io.swagger.client.model.LocatedCell
import io.swagger.client.model.ReadPromise
import io.swagger.client.model.ReadRequest
import io.swagger.client.model.WriteRequest
import io.swagger.client.ApiInvoker
import io.swagger.client.ApiException

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date

import scala.collection.mutable.HashMap

class IoApi(val defBasePath: String = "http://172.17.0.2:8080",
                        defApiInvoker: ApiInvoker = ApiInvoker) {
  var basePath = defBasePath
  var apiInvoker = defApiInvoker

  def addHeader(key: String, value: String) = apiInvoker.defaultHeaders += key -> value 

  /**
   * The response of a read request
   * Whenever someone makes a read request, a promise is delivered. The promise has date at which the response will be read to download. 
   * @param sheet Name of the sheet 
   * @param hash hash handed in the ReadPromise 
   * @return List[LocatedCell]
   */
  def hashSheet(sheet: String, hash: String): Option[List[LocatedCell]] = {
    // create path and map variables
    val path = "/{sheet}/{hash}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "sheet" + "\\}",apiInvoker.escape(sheet)).replaceAll("\\{" + "hash" + "\\}",apiInvoker.escape(hash))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (sheet == null) throw new Exception("Missing required parameter 'sheet' when calling IoApi->hashSheet")

    if (hash == null) throw new Exception("Missing required parameter 'hash' when calling IoApi->hashSheet")

    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "array", classOf[LocatedCell]).asInstanceOf[List[LocatedCell]])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Reads from spreadsheet
   * Reads from sheet the grid described by origin, width and length at the given time by the agent identified by tag. If the agent has no cell defined use default agent. 
   * @param sheet Name of the sheet 
   * @param body  
   * @return ReadPromise
   */
  def readSheet(sheet: String, body: ReadRequest): Option[ReadPromise] = {
    // create path and map variables
    val path = "/read/{sheet}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "sheet" + "\\}",apiInvoker.escape(sheet))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (sheet == null) throw new Exception("Missing required parameter 'sheet' when calling IoApi->readSheet")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling IoApi->readSheet")

    

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "POST", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[ReadPromise]).asInstanceOf[ReadPromise])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Returns the latest size of the sheet.
   * The size of the sheet at the present (latest time). 
   * @param sheet Name of the sheet 
   * @return Dimensions
   */
  def sizeSheet(sheet: String): Option[Dimensions] = {
    // create path and map variables
    val path = "/size/{sheet}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "sheet" + "\\}",apiInvoker.escape(sheet))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (sheet == null) throw new Exception("Missing required parameter 'sheet' when calling IoApi->sizeSheet")

    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[Dimensions]).asInstanceOf[Dimensions])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Writes to spreadsheet
   * Write on sheet the grid of dimension width by length at origin at time by agent identified with tag the cell array in the same order. 
   * @param sheet Name of the sheet 
   * @param body  
   * @return void
   */
  def writeSheet(sheet: String, body: WriteRequest) = {
    // create path and map variables
    val path = "/write/{sheet}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "sheet" + "\\}",apiInvoker.escape(sheet))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (sheet == null) throw new Exception("Missing required parameter 'sheet' when calling IoApi->writeSheet")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling IoApi->writeSheet")

    

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "POST", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
                  case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

}
